# -*- coding: utf-8 -*-
"""Diamond_bids.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l_1xlyZFxyD9-sZACcEnYddV7sS0vED2

# Code 1
"""

import random

def bid_diamonds(hand, remaining_diamonds, opponent_seen_cards, num_players, player_previous_bids):
  """
  This function implements a bidding strategy for the Diamonds game that considers:

  - Opponent's potential cards based on seen bids (opponent_seen_cards).
  - Player's hand strength (number of high cards).
  - Round number (early, middle, late).
  - Number of players (2 or 3).

  Args:
    hand: A list of card values in the player's hand.
    remaining_diamonds: A list of card values of the remaining diamonds.
    opponent_seen_cards: A list of card values seen from opponent's bids.
    num_players: Number of players in the game (2 or 3).
    player_previous_bids: A list of the player's previous bids.

  Returns:
    A list of card values representing the player's bids for each diamond.
  """

  bids = []
  total_rounds = len(remaining_diamonds)

  for i, diamond in enumerate(remaining_diamonds):
    current_round = i + 1
    potential_highest_opponent_card = max(opponent_seen_cards, default=0)

    if current_round <= int(total_rounds / 3):
        if diamond <= 7:
            bid = min((card for card in hand if card > potential_highest_opponent_card), default=0)
        else:
            bid = choose_bid(hand, potential_highest_opponent_card, diamond, player_previous_bids, aggressive=False)
    elif current_round <= int(2 * total_rounds / 3):
        bid = choose_bid(hand, potential_highest_opponent_card, diamond, player_previous_bids, aggressive=False)
    else:
        bid = choose_bid(hand, potential_highest_opponent_card, diamond, player_previous_bids, aggressive=True, prioritize_high=True)

    bids.append(bid)
    hand.remove(bid)  # remove the bid card from AI's hand

  return bids

def choose_bid(hand, potential_highest_opponent_card, diamond_value, player_previous_bids, aggressive=False, prioritize_high=False):
    # Consider bidding low for Aces even if aggressive
    if 14 in hand and not prioritize_high:
        non_ace_cards = [card for card in hand if card != 14]
        if non_ace_cards:  # Check if there are any non-Ace cards
            return min(non_ace_cards)
        else:
            return 14  # If all cards are Aces, return 14

    # Prioritize high cards in late rounds if available
    if prioritize_high and any(card > 10 for card in hand):
        return max(card for card in hand if card > 10)

    # Choose a card higher than opponent's potential highest, considering hand strength
    higher_cards = [card for card in hand if card > potential_highest_opponent_card]
    if higher_cards:
        if aggressive or diamond_value > 10:  # Bid aggressively for high-value diamonds
            return max(higher_cards)
        else:
            # Sometimes choose a lower card for strategy
            return random.choice(higher_cards)
    else:
        # If no high card or not aggressive, consider bluffing or low bid
        if diamond_value < 7:  # If the diamond value is low, bid a low card
            return min(hand)
        else:  # If the diamond value is high, bid a high card
            if player_previous_bids and max(player_previous_bids) > max(hand):
                return max(hand)
            else:
                return random.choice([card for card in hand if card > max(player_previous_bids, default=0)])

def play_diamonds_game(num_players=2):
  """
  Simulates a Diamonds game between the player and the AI.
  """

  suits = ["hearts", "clubs", "spades"]  # Define suits (adjust for 2 players)
  num_players = 3  # Change to 2 for a 2-player game

  # Separate suits (without shuffling player cards)
  hearts = [rank for rank in range(2, 15)]
  clubs = [rank for rank in range(2, 15)]
  spades = [rank for rank in range(2, 15)]

  # Deal cards based on players (no shuffling player cards)
  player_cards = []
  if num_players == 3:
    player_cards = [hearts, clubs, spades]
  elif num_players == 2:
    player_cards = [hearts, clubs]
  else:
    print("Invalid number of players (must be 2 or 3)!")
    exit()

  # Create and shuffle diamonds deck
  diamonds = [rank for rank in range(2, 15)]
  random.shuffle(diamonds)

  # Separate remaining cards (all cards except diamonds)
  remaining_cards = player_cards.copy()  # Combine player cards
  player_hand = remaining_cards.pop(0)  # Player gets first suit

  # Distribute remaining cards to opponent(s)
  opponent_hand = []
  for _ in range(num_players - 1):
    opponent_hand.extend(remaining_cards.pop(0))

  opponent_seen_cards = []  # Track opponent's seen cards

  # Player score and AI score initialization
  player_score = 0
  opponent_score = 0
  ai_bids = []  # Track AI's bids
  player_previous_bids = []

  # Game loop for each diamond round
  for diamond in diamonds:
    print(f"\nRound: {diamonds.index(diamond) + 1} (Diamond: {diamond})")

    # Player bid
    player_bid = int(input("Your bid (enter card value 2-14): "))
    player_hand.remove(player_bid)  # Remove bid card from player's hand
    player_previous_bids.append(player_bid)
    # AI bid (using bid_diamonds function)
    while True:
      ai_bid = choose_bid([card for card in opponent_hand if card not in ai_bids], max([player_bid] + opponent_seen_cards), diamond, player_previous_bids, aggressive=True)
      if ai_bid not in ai_bids:
        break
    ai_bids.append(ai_bid)
    opponent_hand.remove(ai_bid)
    opponent_seen_cards.append(ai_bid)
    print(f"AI bid: {ai_bid}")

    # Determine winner and award points
    if player_bid > ai_bid:
      winner = "Player"
      player_score += diamond
    elif player_bid < ai_bid:
      winner = "AI"
      opponent_score += diamond
    else:
      winner = "Tie"
      player_score += diamond // 2
      opponent_score += diamond // 2

    print(f"{winner} wins the round! (Scores: Player: {player_score}, AI: {opponent_score})")

  # Print final scores and winner
  print(f"\nFinal Scores: Player: {player_score}, AI: {opponent_score}")
  if player_score > opponent_score:
    print("You win!")
  elif player_score < opponent_score:
    print("AI wins!")
  else:
    print("It's a tie!")

# Play the game (change num_players to 2 for a 2-player game)
play_diamonds_game()

"""# Code 2"""

import random

# Function to calculate the point value of a card
def get_card_value(card):
    if card in ['J', 'Q', 'K']:
        return 11
    elif card == 'A':
        return 14
    else:
        return int(card)

# Function to simulate a round of bidding
def play_round(user_card, ai_card):
    if get_card_value(user_card) != get_card_value(ai_card):
        if get_card_value(user_card) > get_card_value(ai_card):
            user_points = get_card_value(user_card)
            ai_points = 0
        else:
            user_points = 0
            ai_points = get_card_value(ai_card)
    else:
        user_points = get_card_value(user_card) // 2
        ai_points = get_card_value(ai_card) // 2

    return user_points, ai_points

# Function to simulate the game
def play_game():
    suits = ['hearts', 'clubs', 'spades']
    diamonds = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
    random.shuffle(diamonds)
    ai_cards = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
    total_points_user = 0
    total_points_ai = 0
    user_suit = random.choice(suits)
    ai_suit = random.choice([suit for suit in suits if suit != user_suit])

    for diamond in diamonds:
        prize_card = diamond

        print(f"Prize card: {prize_card} of diamonds")
        print(f"Your suit: {user_suit}")
        print(f"AI suit: {ai_suit}")

        user_card = input("Enter your card: ")
        ai_card = random.choice(ai_cards)
        ai_cards.remove(ai_card)

        user_points, ai_points = play_round(user_card, ai_card)
        total_points_user += user_points
        total_points_ai += ai_points

        print(f"You won {user_points} points")
        print(f"AI won {ai_points} points")
        print("")

    print("Game over!")
    print(f"Your total points: {total_points_user}")
    print(f"AI's total points: {total_points_ai}")

    if total_points_user > total_points_ai:
        print("You win!")
    elif total_points_user < total_points_ai:
        print("AI wins!")
    else:
        print("It's a tie!")

# Start the game
play_game()

